# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=/home/joao.valenca/.oh-my-zsh

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="wezm+"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias cd='cd -LP'
alias less='less -r'
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias ssh='ssh -o ServerAliveInterval=30'

alias d='docker'
alias d_im='docker images'
alias d_ps='d ps -a'
alias d_build_pulse='d rmi feedzai:pulse && (cdps && cp /home/jnuno/projects/2013_07_pulse_dev_utils/docker/pulse/* . && d build -t feedzai:pulse .)'
alias d_rm_all='d_ps | tail -n +2 | cut -f 1 -d " " | xargs docker rm -f'
alias d_rm_ps='docker ps -a -q | xargs -n 1 -P 12 docker rm -f'
alias d_rm_all='docker ps -a -q --filter "status=exited" | xargs docker rm -f'
alias d_rm_sys='docker ps -a | grep "docker-repo.zai" | awk ''{ print $1 }'' | xargs docker rm -f'
alias d_rmi_all='docker images -q --filter "dangling=true" | xargs docker rmi -f'
alias d_rmi_none='docker rmi $(docker images --filter ''dangling=true'' -q --no-trunc)'
alias cclip='xclip -selection clipboard'
alias warn='notify-send "Task Finished"'
alias plot="gnuplot -p -e 'plot \"/dev/stdin\"'"

function bluez(){
    PREFIX="[[\e[94mBLUEZ\e[39m]] :"
    case $1 in 
        "headset")
            PHONES=70:26:05:3C:AC:A6;;
        "phones")
            PHONES=00:FA:21:2E:5E:45;;
        *)
            echo "${PREFIX} Pick phones or headset" ; return;;
    esac
    PHONES_=$(echo ${PHONES} | tr ":" "_")

    if [[ $(bluetoothctl 2> /dev/null <<< "info ${PHONES}" | grep Connected | cut -f 2 -d ":") == " yes" ]]
    then
        echo "${PREFIX} Turning headset [\e[91mOFF\e[39m]"
        bluetoothctl 2> /dev/null <<< "disconnect ${PHONES}"
    else
        echo "${PREFIX} Turning headset [\e[92mON\e[39m]"
        rfkill unblock bluetooth
        bluetoothctl 2> /dev/null <<< "power on"
        bluetoothctl 2> /dev/null <<< "connect ${PHONES}"
        while : ; do
            echo "${PREFIX} Awaiting connection..."
            [[ $(bluetoothctl 2> /dev/null <<< "info ${PHONES}" | grep Connected | cut -f 2 -d ":") != " yes" ]] || break
            sleep 1s
        done
        while : ; do
            echo "${PREFIX} Running \"pacmd set-card-profile bluez_card.${PHONES_} a2dp_sink\"..."
            [[ $(pacmd set-card-profile bluez_card.${PHONES_} a2dp_sink) == "No card found by this name or index." ]] || break
            sleep 1s
        done
        while : ; do
            echo "${PREFIX} Running \"pactl set-default-sink bluez_sink.${PHONES_}\"..."
            [[ $(pactl set-default-sink bluez_sink.${PHONES_}) == "Failure: No such entity" ]] || break
            sleep 1s
        done
        pacmd set-card-profile bluez_card.${PHONES_} a2dp_sink
    fi
}

function d_db() {
    psql -h `d inspect --format '{{ .NetworkSettings.IPAddress }}' postgresql` pulse pulse
}

function d_in() {
    d exec -it $(d_ps | grep $1 | awk '{print $1}') bash
}

function d_rm() {
    d rm -f $1
}


function d_ip() {
#Is only expecting one argument
    if [ $# -ne 1 ];
        then echo "Illegal usage of the script, its only expecting the container ID as parameter."
    fi
    docker inspect --format '{{ .NetworkSettings.IPAddress }}' $(d_ps | grep $1 | awk '{print $1}')
}

#export DOCKER_API_VERSION="1.23"
export BUILD_ANALYSIS_PATH=~/Pulse/2013_07_pulse_dev_utils/build-analysis/
export PATH=$BUILD_ANALYSIS_PATH:$PATH
export PHABRICATOR_TOOLS_PATH=/home/joao.valenca/bin/development_tools
export PATH=$PHABRICATOR_TOOLS_PATH/phabricator/arcanist/bin/:$PATH
export LOCAL_TEST_RESOURCES=/home/joao.valenca/Pulse/test-resources/files/

setopt HIST_FIND_NO_DUPS

export NVM_DIR="/home/joao.valenca/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

eval $(thefuck --alias)
