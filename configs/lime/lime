#!/bin/bash
REG="^[A-Z]+-[0-9]+"

# Absolute path to this script. 
SCRIPT=$(readlink -f "${0}")
# Absolute path this script is in. 
SCRIPTPATH=$(dirname "${SCRIPT}")

TASK_LIST="${SCRIPTPATH}"/task_list.txt
DAILY_LIST="${SCRIPTPATH}"/daily_list.txt
TOTAL_LIST="${SCRIPTPATH}"/total_list.txt
CURRENT_TASK="${SCRIPTPATH}"/current_task.txt

JIRA_BIN="${SCRIPTPATH}"/jira_helper

DATE=$(date "+%Y-%m-%d %H:%M")

# Looks into the task list for the corresponding issue title to a given key.
function get_title() {
    grep -E "^${1}\s" "${TASK_LIST}" | sed -sE "s/${REG}\t//g"
}

# Adds an issue to the task list. If project key is "NULL", it will be ignored by other
# commands. If no description is given, JIRA is consulted instead.
function add() {
    ISSUE=$(echo "$@" | grep -Eo "${REG}")
    TITLE=$(echo "$@" | sed -sE "s/${REG}\s*//g")
    if [[ -z "${ISSUE}" ]];
    then
        echo "Invalid JIRA project. Use the NULL project for personal issue tracking."
        exit 1
    elif grep -q "^${ISSUE}" "${TASK_LIST}";
    then
        echo "Duplicated issue"
    else
        if [[ -z "${TITLE}" ]];
        then
            TITLE=$("${JIRA_BIN}" lookup "${ISSUE}")
        fi
        echo "Adding ${ISSUE}: ${TITLE}"
        echo -e "${ISSUE}\t${TITLE}" >> "${TASK_LIST}"
    fi
}

# Removes an issue from the task list
function remove() {
    sed -i "/^${1}\t/d" "${TASK_LIST}" 
}

# Stops the current task and logs the time in the same line. Prompts for comments.
function stop() {
    LAST=$(tail -1 "${DAILY_LIST}")
    if [[ "${LAST}" =~ ${REG}[[:blank:]][0-9\-]{10}[[:blank:]][0-9:]{5}$ ]];
    then
        ISSUE=$(echo "${LAST}" | cut -f 1)
        TITLE=$(get_title "${ISSUE}")
        echo "Stopping ${ISSUE}: ${TITLE}"

        read -r -p "Add a comment to the task log: " COMMENT
        if [[ -z "${COMMENT}" ]];
        then
            COMMENT='null'
        fi

        sed -i "\$s/${LAST}/${LAST}\t${DATE}\t${COMMENT}/" "${DAILY_LIST}"
        echo "" > "${CURRENT_TASK}"
    elif [[ "${LAST}" =~ ${REG}[[:blank:]][0-9\-]{10}[[:blank:]][0-9:]{5}[[:blank:]][0-9\-]{10}[[:blank:]][0-9:]{5}.*$ ]] || [[ -z ${LAST} ]];
    then
        echo "Nothing to stop. Carrying on!"
    else
        echo "Mal formatted file. Check ${DAILY_LIST} for errors."
    fi
}

# Starts a task and begins the log line. Stops any ongoing task.
function start() {
    stop
    ISSUE="${1}"
    TITLE=$(get_title "${ISSUE}")
    if [[ -z "${ISSUE}" ]];
    then
        echo "No issue given. Nothing to start!"
        exit 1
    elif [[ ! "${ISSUE}" =~ ${REG} ]]
    then
        echo "Invalid issue. Nothing to start!"
        exit 1
    else
        echo "Starting ${ISSUE}: ${TITLE}"

        echo -e "${ISSUE}\t${DATE}" >> "${DAILY_LIST}"
        echo -e "${ISSUE}\t${TITLE}" > "${CURRENT_TASK}"
    fi
}

# Clears the daily worklog list and appends it to the global one. Useful for skipping the log submission
# after a mistaske or mishap
function reset() {
    echo "Resetting $(cat "${DAILY_LIST}" | wc -l ) log entries."
    echo "Daily Entry from ${DATE}: " >> "${TOTAL_LIST}"
    cat "${DAILY_LIST}" >> "${TOTAL_LIST}"
    true > ${DAILY_LIST}
}

# Clears the task pool (useful for end of sprints)
function clear() {
    read -r -p "Removing $(cat "${TASK_LIST}" | wc -l) tasks at hand. Are you sure? [y/n] " yn
    case $yn in
        [Yy]* ) true > "${TASK_LIST}"; return;;
        [Nn]* ) return;;
        * ) echo "Please answer yes or no.";;
    esac
}

# Shows the total time spent per task as well as the sum of the totals in a column format.
function show_total_time {
    (
        declare -A TIME_PER_ISSUE
        for ISSUE in $(cat "${DAILY_LIST}" | cut -f 1 | sort | uniq); do
            TIME_PER_ISSUE["${ISSUE}"]="0"
        done

        IFS=$'\n'
        for LOG in $(cat "${DAILY_LIST}"); do
            ISSUE=$(echo "${LOG}" | cut -f 1)
            START=$(echo "${LOG}" | cut -f 2)
            STOP=$(echo "${LOG}" | cut -f 3)
            if [[ -z ${STOP} ]]
            then
                STOP="${DATE}"
            fi
            START=$(date -d "${START}" +'%s')
            STOP=$(date -d "${STOP}" +'%s')
            TIME_PER_ISSUE["${ISSUE}"]=$(( TIME_PER_ISSUE["${ISSUE}"] + (STOP - START)/60 ))
        done 

        TOTAL="0"
        for ISSUE in "${!TIME_PER_ISSUE[@]}"; do
            echo -en "${ISSUE}\t$(get_title ${ISSUE})"
            echo -e "\t$(( ${TIME_PER_ISSUE[${ISSUE}]}/60 ))h $(( ${TIME_PER_ISSUE[${ISSUE}]}%60 ))m"
            TOTAL=$(( TOTAL + TIME_PER_ISSUE[${ISSUE}] ))
        done
        echo -e " \t \tTOTAL"
        echo -e " \t \t$(( TOTAL/60 ))h $(( TOTAL%60 ))m"
    ) | column -ts $'\t'
}

# Shows the task currently being worked on.
function show_current_task {
    cat "${CURRENT_TASK}"
}

# Fetches all the relevant issues in the current ongoing sprint with the most tasks assigned to the user
function sprint() {
    IFS=$'\n'
    for ISSUE in $("${JIRA_BIN}" sprint); do
        add "${ISSUE}"
    done
}

# Submits all the work logs to jira, with start time, duration and comments.
function submit() {
    stop
    echo "Total time to be logged:"
    show_total_time

    read -r -p "Are you sure? [y/n] " yn
    case $yn in
        [Yy]* ) 
            IFS=$'\n'
            for LOG in $(cat "${DAILY_LIST}" | grep -vE "^NULL-[0-9]+.*"); do
                echo $LOG
                "${JIRA_BIN}" log "${LOG}"
            done
            reset
            return
        ;;
        [Nn]* ) 
            return
        ;;
        * ) echo "Please answer yes or no.";;
    esac
    
}

# Shows a summary of the current program status, namely the working task and the
# total hours spent so far.
function status() {
    echo -e "Currently Working on:\n$(show_current_task)"
    echo -e "\nTime worked since last reset: "
    show_total_time
}

# Parse arguments.
case ${1} in
    add)
        add "${@:2}"
    ;;
    remove)
        remove "${@:2}"
    ;;
    start)
        start "${@:2}"
    ;;
    stop)
        stop
    ;;
    reset)
        reset
    ;;
    clear)
        clear
    ;;
    sprint)
        sprint
    ;;
    submit)
        submit
    ;;
    status)
        status
    ;;
    show)
        shift
        case ${1} in
            total_time)
                show_total_time
            ;;
            current_task)
                show_current_task
            ;;
        esac
    ;;
esac
